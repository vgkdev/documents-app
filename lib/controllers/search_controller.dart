import 'package:get/get.dart';
import 'package:firebase_storage/firebase_storage.dart';
import '../models/document_display.dart';

class SearchController extends GetxController {
  final FirebaseStorage _storage = FirebaseStorage.instance;

  // Search state
  final RxString searchQuery = ''.obs;
  final RxList<Reference> searchResults = <Reference>[].obs;
  final RxBool isSearching = false.obs;
  final RxString searchError = ''.obs;

  // Filter options
  final RxString selectedFileType = 'all'.obs;
  final RxBool showOnlyPdf = false.obs;
  final RxBool showOnlyDocx = false.obs;
  final RxBool showOnlyTxt = false.obs;

  // Search history
  final RxList<String> searchHistory = <String>[].obs;

  // All files cache (for offline search)
  final RxList<Reference> allFiles = <Reference>[].obs;

  @override
  void onInit() {
    super.onInit();
    // Load all files when controller initializes
    loadAllFiles();
  }

  /// Load t·∫•t c·∫£ file t·ª´ Firebase Storage ƒë·ªÉ cache
  Future<void> loadAllFiles() async {
    try {
      print('üìÅ Loading all files for search...');
      final ListResult result = await _storage.ref('uploads').listAll();
      allFiles.assignAll(result.items);
      print('‚úÖ Loaded ${allFiles.length} files for search');
    } catch (e) {
      print('‚ùå Error loading files for search: $e');
      searchError.value = 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch file: $e';
    }
  }

  /// Th·ª±c hi·ªán t√¨m ki·∫øm
  Future<void> performSearch(String query) async {
    if (query.trim().isEmpty) {
      searchResults.clear();
      searchQuery.value = '';
      return;
    }

    searchQuery.value = query.trim();
    isSearching.value = true;
    searchError.value = '';

    try {
      print('üîç Searching for: "$query"');

      // Th√™m v√†o l·ªãch s·ª≠ t√¨m ki·∫øm
      addToSearchHistory(query);

      // T√¨m ki·∫øm trong cache files
      final List<Reference> results = _searchInFiles(query);

      // √Åp d·ª•ng filter theo lo·∫°i file
      final List<Reference> filteredResults = _applyFileTypeFilter(results);

      searchResults.assignAll(filteredResults);

      print('‚úÖ Search completed. Found ${searchResults.length} results');
    } catch (e) {
      print('‚ùå Search error: $e');
      searchError.value = 'L·ªói khi t√¨m ki·∫øm: $e';
    } finally {
      isSearching.value = false;
    }
  }

  /// T√¨m ki·∫øm trong danh s√°ch file
  List<Reference> _searchInFiles(String query) {
    final String lowerQuery = query.toLowerCase();
    final List<Reference> results = <Reference>[];

    for (final Reference file in allFiles) {
      final String fileName = file.name.toLowerCase();
      final String filePath = file.fullPath.toLowerCase();

      // T√¨m ki·∫øm theo t√™n file
      if (fileName.contains(lowerQuery)) {
        results.add(file);
        continue;
      }

      // T√¨m ki·∫øm theo ƒë∆∞·ªùng d·∫´n
      if (filePath.contains(lowerQuery)) {
        results.add(file);
        continue;
      }

      // T√¨m ki·∫øm theo extension
      final String extension = _getFileExtension(fileName);
      if (extension.contains(lowerQuery)) {
        results.add(file);
        continue;
      }

      // T√¨m ki·∫øm fuzzy (t∆∞∆°ng t·ª±)
      if (_isFuzzyMatch(fileName, lowerQuery)) {
        results.add(file);
      }
    }

    // S·∫Øp x·∫øp k·∫øt qu·∫£ theo ƒë·ªô ∆∞u ti√™n
    results.sort((a, b) {
      final String nameA = a.name.toLowerCase();
      final String nameB = b.name.toLowerCase();

      // ∆Øu ti√™n file c√≥ t√™n b·∫Øt ƒë·∫ßu b·∫±ng query
      final bool aStartsWith = nameA.startsWith(lowerQuery);
      final bool bStartsWith = nameB.startsWith(lowerQuery);

      if (aStartsWith && !bStartsWith) return -1;
      if (!aStartsWith && bStartsWith) return 1;

      // N·∫øu c√πng lo·∫°i, s·∫Øp x·∫øp theo t√™n
      return nameA.compareTo(nameB);
    });

    return results;
  }

  /// √Åp d·ª•ng filter theo lo·∫°i file
  List<Reference> _applyFileTypeFilter(List<Reference> files) {
    if (selectedFileType.value == 'all') {
      return files;
    }

    return files.where((file) {
      final String extension = _getFileExtension(file.name);

      switch (selectedFileType.value) {
        case 'pdf':
          return extension == 'pdf';
        case 'docx':
          return extension == 'docx' || extension == 'doc';
        case 'txt':
          return extension == 'txt';
        case 'image':
          return ['jpg', 'jpeg', 'png', 'gif'].contains(extension);
        case 'spreadsheet':
          return ['xlsx', 'xls'].contains(extension);
        case 'presentation':
          return ['pptx', 'ppt'].contains(extension);
        default:
          return true;
      }
    }).toList();
  }

  /// Fuzzy matching ƒë·ªÉ t√¨m ki·∫øm t∆∞∆°ng t·ª±
  bool _isFuzzyMatch(String fileName, String query) {
    if (query.length < 2) return false;

    int queryIndex = 0;
    for (int i = 0; i < fileName.length && queryIndex < query.length; i++) {
      if (fileName[i] == query[queryIndex]) {
        queryIndex++;
      }
    }

    return queryIndex == query.length;
  }

  /// L·∫•y extension c·ªßa file
  String _getFileExtension(String fileName) {
    return fileName.split('.').last.toLowerCase();
  }

  /// Th√™m query v√†o l·ªãch s·ª≠ t√¨m ki·∫øm
  void addToSearchHistory(String query) {
    if (query.trim().isNotEmpty && !searchHistory.contains(query)) {
      searchHistory.insert(0, query);
      // Gi·ªõi h·∫°n l·ªãch s·ª≠ t√¨m ki·∫øm
      if (searchHistory.length > 10) {
        searchHistory.removeLast();
      }
    }
  }

  /// X√≥a l·ªãch s·ª≠ t√¨m ki·∫øm
  void clearSearchHistory() {
    searchHistory.clear();
  }

  /// X√≥a m·ªôt item kh·ªèi l·ªãch s·ª≠
  void removeFromSearchHistory(String query) {
    searchHistory.remove(query);
  }

  /// Thay ƒë·ªïi filter lo·∫°i file
  void changeFileTypeFilter(String fileType) {
    selectedFileType.value = fileType;
    // Th·ª±c hi·ªán t√¨m ki·∫øm l·∫°i v·ªõi filter m·ªõi
    if (searchQuery.value.isNotEmpty) {
      performSearch(searchQuery.value);
    }
  }

  /// Clear k·∫øt qu·∫£ t√¨m ki·∫øm
  void clearSearch() {
    searchQuery.value = '';
    searchResults.clear();
    searchError.value = '';
  }

  /// Refresh search (t·∫£i l·∫°i file v√† t√¨m ki·∫øm l·∫°i)
  Future<void> refreshSearch() async {
    await loadAllFiles();
    if (searchQuery.value.isNotEmpty) {
      await performSearch(searchQuery.value);
    }
  }

  /// L·∫•y th√¥ng tin file ƒë·ªÉ hi·ªÉn th·ªã
  String getFileDisplayName(Reference file) {
    return file.name;
  }

  String getFileDisplayPath(Reference file) {
    return file.fullPath;
  }

  String getFileDisplayType(Reference file) {
    return _getFileExtension(file.name).toUpperCase();
  }

  /// L·∫•y icon theo lo·∫°i file
  String getFileIcon(Reference file) {
    final String extension = getFileDisplayType(file);

    switch (extension.toLowerCase()) {
      case 'pdf':
        return 'üìÑ';
      case 'docx':
      case 'doc':
        return 'üìù';
      case 'txt':
        return 'üìÑ';
      case 'jpg':
      case 'jpeg':
      case 'png':
        return 'üñºÔ∏è';
      case 'xlsx':
      case 'xls':
        return 'üìä';
      case 'pptx':
      case 'ppt':
        return 'üìä';
      default:
        return 'üìÅ';
    }
  }

  /// L·∫•y m√†u theo lo·∫°i file
  int getFileColor(Reference file) {
    final String extension = getFileDisplayType(file);

    switch (extension.toLowerCase()) {
      case 'pdf':
        return 0xFFE53E3E; // Red
      case 'docx':
      case 'doc':
        return 0xFF3182CE; // Blue
      case 'txt':
        return 0xFF38A169; // Green
      case 'jpg':
      case 'jpeg':
      case 'png':
        return 0xFFDD6B20; // Orange
      case 'xlsx':
      case 'xls':
        return 0xFF2F855A; // Dark Green
      case 'pptx':
      case 'ppt':
        return 0xFFC05621; // Dark Orange
      default:
        return 0xFF718096; // Gray
    }
  }
}
